" Chris Sun's vimrc file
"
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" " alternatively, pass a path where Vundle should install bundles
" "let path = '~/some/path/here'
" "call vundle#rc(path)

" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'

""""""""""""""""""""""""
" List of vim plugins
""""""""""""""""""""""""
" Keyboard shortcuts for Rails
Bundle 'tpope/vim-rails.git'
" Quickly comment out a section of code
Bundle 'tomtom/tcomment_vim.git'
" Can quickly find matching if/else/end, def/end, class/end, etc.
" by hitting the % key
Bundle 'edsono/vim-matchit.git'
" A way to run rspec from vim
Bundle 'thoughtbot/vim-rspec.git'
" A tool for sending commands from vim to a specific tmux pane
Bundle 'jgdavey/tslime.vim.git'

" COLORSCHEMES
" Color scheme - Solarized (http://ethanschoonover.com/solarized)
Bundle 'altercation/vim-colors-solarized.git'
" Another color scheme
Bundle 'zeis/vim-kolor.git'
" Another color scheme, molokai
Bundle 'tomasr/molokai.git'
" Vividchalk color scheme
Bundle 'tpope/vim-vividchalk'

" Add/remove quotes/tags around a word or line
Bundle 'tpope/vim-surround.git'
" Run Git commands inside vim, (e.g. git annotate, git diff)
Bundle 'tpope/vim-fugitive.git'
" Syntax highlighting for CoffeeScript
Bundle 'kchmck/vim-coffee-script.git'
" Show buffers in command bar
Bundle 'bling/vim-bufferline.git'
" Advanced status bar for vim
Bundle 'bling/vim-airline.git'
" Syntax highlighting for Cumcumber
Bundle 'tpope/vim-cucumber.git'
" AutoCompletion suggestions
Bundle 'vim-scripts/AutoComplPop.git'
" Fuzzy File Finder
Bundle 'kien/ctrlp.vim'

" Scripts from http://vim-scripts.org/vim/scripts.html
Bundle 'snipMate'
Bundle 'AutoTag'

" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.

" Enable file type detection and use language-dependent indenting.
filetype plugin indent on

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  " To enable 256 colors in vim
  set t_Co=256
  syntax enable
  set background=dark
  colorscheme vividchalk
  set hlsearch
  let g:airline_theme='light'
endif

" No backup files (a.txt~) or swap files
set nobackup

" For swap files (a.txt.swp), place them in the /tmp directory
set directory=/tmp

" Make tabs only 2 spaces.
set expandtab
set tabstop=2 
set softtabstop=2 
set shiftwidth=2

" Set the tag file
set tags=./tags;

" Make the background black and the foreground white
set background=dark

" Show line numbers on left column
set number

" To navigate between VIM windows, normal one uses
" Ctrl-w then (h,j,k,l or arrow keys)
" instead use Ctrl-h, Ctrl-j, Ctrl-k, Ctrl-l
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Open new split panes to right and bottom, which feels more natural than
" Vimâ€™s default:
set splitbelow
set splitright

" For the autoTag.vim plugin to work
" need to source the file
" source autoTag.vim
"

"""""""""" Search search stuff """"""""""
" Use the Silver Searcher (ag) for grep/search
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>
"""""""""" end Search search stuff """"""""""


" Assigning the leader key
let mapleader = ","

" Typing jj will leave Insert Mode
" Doing this because the Escape key is far away
imap jj <Esc>

" Alias ,cc for the :TComment command which comments out lines
map <Leader>cc :TComment<CR> 

" Since the rails-vim plugin is installed, have some aliases
" for common commands
map <Leader>u :Runittest<cr>
map <Leader>vc :RVcontroller<cr>
map <Leader>vf :RVfunctional<cr>
map <Leader>vu :RVunittest<CR>
map <Leader>vm :RVmodel<cr>
map <Leader>vv :RVview<cr>

" This tells vim-rspec to use Send_to_Tmux to run the selected specs.
let g:rspec_command = 'call Send_to_Tmux("rake spec SPEC={spec}\n")'
" let g:rspec_command = 'call Send_to_Tmux("RAILS_ENV=test bin/rake spec SPEC={spec}\n")'

" vim-rspec mappings
" taken from https://github.com/thoughtbot/dotfiles/blob/master/vimrc 
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Close a buffer without closing the split
" See http://stackoverflow.com/questions/4465095/vim-delete-buffer-without-losing-the-split-window
" map <Leader>c :bp|bd #<CR>

" taken from r00k's vimrc
" open the vimrc
map <Leader>vi :tabe ~/.vimrc<CR>

" Highlight any characters after 80th column
" Purpose is to enforce a limit of 80 characters per line,
" which is a common coding standard
" highlight OverLength ctermbg=gray ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" case-insensitve search
set ignorecase
" case-senstivie search if search pattern has uppercase letters
set smartcase

function! ToggleNumMode()
  if(&rnu == 1)
    set nu
  else
    set rnu
  endif
endfunc

" Toggle between relative and absolute line numbers
nnoremap <Leader>n :call ToggleNumMode()<CR>
